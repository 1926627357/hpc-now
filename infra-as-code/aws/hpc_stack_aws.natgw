/*
 * Copyright (C) 2022-present Shanghai HPC-NOW Technologies Co., Ltd.
 * This code is distributed under the license: MIT License
 * Originally written by Zhenrong WANG
 * mailto: zhenrongwang@live.com | wangzhenrong@hpc-now.com
 */
 
#CREATE_NATGW_NODE
resource "aws_instance" "natgw" {
  availability_zone = "DEFAULT_ZONE_ID"
  subnet_id = aws_subnet.hpc_stack_pub_subnet.id
  source_dest_check = "false"
  vpc_security_group_ids = [aws_security_group.natgw_transparent.id]
#INSERT_AMI_HERE
#  associate_public_ip_address = "true"
  instance_type = data.aws_ec2_instance_types.t2c1g.instance_types.0
  root_block_device {
    volume_size = 30
  }
  tags = {
    Name = "natgw-RG_NAME"
    Project = "RG_NAME"
  }    
  user_data = <<EOF
#!/bin/bash
yum -y install iptables-services
systemctl stop firewalld
systemctl disable firewalld
systemctl mask firewalld
private_ip=`ifconfig | grep inet | head -n1 | awk '{print $2}'`
cat /etc/sysctl.conf | grep net.ipv4.ip_forward
if [ $? -ne 0 ]; then
  echo net.ipv4.ip_forward=1 >> /etc/sysctl.conf
else
  sed -i '/net.ipv4.ip_forward/d' /etc/sysctl.conf
  echo net.ipv4.ip_forward=1 >> /etc/sysctl.conf
fi
sysctl -p /etc/sysctl.conf
iptables -t nat -A POSTROUTING -o eth0 -s 10.0.0.0/20 -j SNAT --to $private_ip
service iptables save
systemctl start iptables
systemctl enable iptables
EOF
}

resource "aws_ec2_instance_state" "ngw_state" {
  instance_id = aws_instance.natgw.id
  state = "running"
}

resource "aws_route_table_association" "subnet_as" {
  subnet_id = aws_subnet.hpc_stack_subnet.id
  route_table_id = aws_route_table.subnet_rt.id
}

resource "aws_route_table" "subnet_rt" {
  vpc_id = aws_vpc.hpc_stack.id
  route {
    cidr_block = "0.0.0.0/0"
    network_interface_id = aws_instance.natgw.primary_network_interface_id
  }
}